generator client {
    provider = "prisma-client-js"
    // No need to use Binary Targets, worked without it for ecommerce-template
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?                   @unique
    username      String?                   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // we must also create a link here stating that a user maybe a part of many conversations as established by the ConversationParticipant[]
    // A USER CAN BE A PART OF MANY CONVERSATIONS
    conversations ConversationParticipant[]

    // a user could have sent a million messages
    messages  Message[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// even though we're using mongodb which is NoSQL db, as in we can really model the data however we like
// prisma really shines when we model our data in a more sql like fashion with sql like relations
model Conversation {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // when describing the relation between a convo and a user, it is safe to say that a user can be part of MANY convos
    // and at the same time, a conversation can have MANY users
    // so we're building an app to support group messages and such
    // so from the above statement, the relationship between a conversation and a user is a MANY-MANY relation
    // in such a relation, it is essential to create JOIN tables to allow these 2 entities to relate to each other

    // A CONVERSATION CAN HAVE MANY PARTICIPANTS
    participants ConversationParticipant[]

    // a conversation can have infinite messages
    // prisma would now freak out, because we have 2 relations with a model so we need to make sure that the values in these are unique
    // one way to do that, is to give the relation for latest message a name
    messages Message[] @relation("conversationMessages")

    // we also want to have another relationship with the Message model
    // that is, to store the LATEST message
    // at any given point, there can only 1 LATEST MESSAGE right?
    // so this is a 1-1 relationship
    latestMessageId String?  @unique @db.ObjectId
    // but this latestMessage is optional as, you wont have a latest message when you start the convo
    latestMessage   Message? @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ConversationParticipant {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    // here, we're telling prisma to form a relation between the userId field in this model to the id field in the User model

    userId               String       @db.ObjectId
    // in the following line, we create a field user of type User and we establish a relation which states that:
    // the first variable, is the name of the field that acts as the foreign key in this relationship
    // and as the 2nd arg, we can pass this references[] and in this field, we can pass the field who is on the other side of this relationship
    user                 User         @relation(fields: [userId], references: [id])
    conversationId       String       @db.ObjectId
    // same explanation as above
    conversation         Conversation @relation(fields: [conversationId], references: [id])
    hasSeenLatestMessage Boolean
}

model Message {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    // when we think of a message, what all info do we need?
    // 1) which convo is this message a part of?
    // 2) who sent this message

    // what kind of relationship is this?
    // a convo can have infinite messages, but a message can only belong to a single conversation
    // this is a MANY-ONE relation

    // a message can only be a part of 1 conversation
    conversation   Conversation @relation(name: "conversationMessages", fields: [conversationId], references: [id])
    conversationId String       @db.ObjectId

    // same thing applies to USER-MESSAGE relationship | a user can send infinite messages but any message can only belong to 1 user
    senderId String @db.ObjectId

    // but every message can be mapped to only 1 user
    sender User @relation(fields: [senderId], references: [id])

    isLatestIn Conversation? @relation("latestConversationMessage")
    body       String
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}
